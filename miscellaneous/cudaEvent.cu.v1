#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include "helper_cuda.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define LOOP_I(_loop) for(int i = 0; i < _loop; i++)

#define NUM_BLOCK (128 * 1024)
#define NUM_T_IN_B 1024
#define ARRAY_SIZE (NUM_T_IN_B * NUM_BLOCK)
#define NUM_STREAMS 4

__global__ void myKernel2(int* _in, int* _out) {
    int tID = blockDim.x * blockIdx.x + threadIdx.x;
    int temp = 0;
    for (int i = 0; i < 500; i++) {
        temp = (temp + _in[tID] * 5) % 10;
    }
    _out[tID] = temp;
}

void runTest(const char* label, bool usePinned) {
    printf("========== %s Memory ==========\n", usePinned ? "Pinned" : "Pageable");

    int *in, *out, *out2;
    if (usePinned) {
        cudaMallocHost(&in, sizeof(int) * ARRAY_SIZE);
        cudaMallocHost(&out, sizeof(int) * ARRAY_SIZE);
        cudaMallocHost(&out2, sizeof(int) * ARRAY_SIZE);
    } else {
        in = (int*)malloc(sizeof(int) * ARRAY_SIZE);
        out = (int*)malloc(sizeof(int) * ARRAY_SIZE);
        out2 = (int*)malloc(sizeof(int) * ARRAY_SIZE);
    }

    memset(in, 0, sizeof(int) * ARRAY_SIZE);
    memset(out, 0, sizeof(int) * ARRAY_SIZE);
    memset(out2, 0, sizeof(int) * ARRAY_SIZE);

    int* dIn, * dOut;
    cudaMalloc(&dIn, sizeof(int) * ARRAY_SIZE);
    cudaMalloc(&dOut, sizeof(int) * ARRAY_SIZE);

    for (int i = 0; i < ARRAY_SIZE; i++) in[i] = rand() % 10;

    cudaStream_t stream[NUM_STREAMS];
    cudaEvent_t start[NUM_STREAMS], end[NUM_STREAMS];
    float times[NUM_STREAMS];

    int chunkSize = ARRAY_SIZE / NUM_STREAMS;

    for (int i = 0; i < NUM_STREAMS; i++) {
        cudaStreamCreate(&stream[i]);
        cudaEventCreate(&start[i]);
        cudaEventCreate(&end[i]);
    }

    for (int i = 0; i < NUM_STREAMS; i++) {
        int offset = chunkSize * i;
        cudaEventRecord(start[i], stream[i]);
        cudaMemcpyAsync(dIn + offset, in + offset, sizeof(int) * chunkSize, cudaMemcpyHostToDevice, stream[i]);
        myKernel2<<<NUM_BLOCK / NUM_STREAMS, NUM_T_IN_B, 0, stream[i]>>>(dIn + offset, dOut + offset);
        cudaMemcpyAsync(out2 + offset, dOut + offset, sizeof(int) * chunkSize, cudaMemcpyDeviceToHost, stream[i]);
        cudaEventRecord(end[i], stream[i]);
    }

    cudaDeviceSynchronize();

    for (int i = 0; i < NUM_STREAMS; i++) {
        cudaEventElapsedTime(&times[i], start[i], end[i]);
        float gb = sizeof(int) * chunkSize * 2 / (1024.0f * 1024.0f * 1024.0f); // H2D + D2H
        printf("Stream[%d] : %6.2f ms | Throughput: %6.2f GB/s\n", i, times[i], gb / (times[i] / 1000.0f));
    }

    for (int i = 0; i < NUM_STREAMS; i++) {
        cudaStreamDestroy(stream[i]);
        cudaEventDestroy(start[i]);
        cudaEventDestroy(end[i]);
    }

    cudaFree(dIn);
    cudaFree(dOut);

    if (usePinned) {
        cudaFreeHost(in);
        cudaFreeHost(out);
        cudaFreeHost(out2);
    } else {
        free(in);
        free(out);
        free(out2);
    }

    printf("\n");
}

int main(void) {
    runTest("Pageable", false);
    runTest("Pinned", true);
    return 0;
}
